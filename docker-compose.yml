version: '3.7'

services:

  elasticsearch:
    container_name: elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:7.7.0
    networks:
      - testsysplan-network
    ports:
      - "9200:9200"
    environment:
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms2g -Xmx2g"
    volumes:
      - ./dockervol/elasticsearch/esdata:/usr/share/elasticsearch/data

  kibana:
    container_name: kibana
    image: docker.elastic.co/kibana/kibana:7.7.0
    networks:
      - testsysplan-network
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    links:
      - elasticsearch 
    
  rabbitmq:
    image: rabbitmq:3.6-management-alpine
    container_name: rabbitmq
    volumes:     
      - ./dockervol/rabbitmq/data:/var/lib/rabbitmq
      - ./dockervol/rabbitmq/log:/var/log/rabbitmq
    ports: 
      # The standard AMQP protocol port
      - 5672:5672
      # Http management UI port
      - 15672:15672
    networks: 
      - testsysplan-network
    environment:
      - RABBITMQ_ERLANG_COOKIE=MYS3C43TK3YF045Y5PL4N
      - RABBITMQ_DEFAULT_USER=root
      - RABBITMQ_DEFAULT_PASS=bn8fLJFD4jjKLShr
      - RABBITMQ_DEFAULT_VHOST=/
      #- CLUSTERED=true
          
  mssqldb:  
    container_name: mssqldb
    image: mcr.microsoft.com/mssql/server:latest
    environment:
      - SA_PASSWORD=RZ_Y#P@UBbjE2q2!
      - MSSQL_SA_PASSWORD=RZ_Y#P@UBbjE2q2!
      - MSSQL_PID=Express
      - ACCEPT_EULA=Y
    networks:
      - testsysplan-network
    ports:
      - "1401:1433"
    
  testsysplan.api:
    container_name: testsysplan.api
    image: ${DOCKER_REGISTRY-}testsysplanapi
    build:
      context: .
      dockerfile: TestSysplan.API/Dockerfile
    environment:      
      - DATABASE_LOCAL_NAME=TesteDb
      - DATABASE_LOCAL_HOST=localhost
      - DATABASE_LOCAL_PORT=1401
      - DATABASE_LOCAL_USER=sa
      - DATABASE_LOCAL_PSWD=RZ_Y#P@UBbjE2q2!
      - AMQP_USER=root
      - AMQP_PASS=bn8fLJFD4jjKLShr
      - AMQP_HOST=rabbitmq
      - AMQP_VHOST=/
      - AMQP_PORT=5672
      - AMQP_SSL=none
      - AMQP_DBC=0
      - ELASTICSEARCH_URL=http://elasticsearch:9200
    networks:
      - testsysplan-network
    ports:
      #http
      - "8080:80"
      #https
      - "8081:443"
    volumes:
      - ${APPDATA}/Microsoft/UserSecrets:/root/.microsoft/usersecrets:ro
      - ${APPDATA}/ASP.NET/Https:/root/.aspnet/https:ro
    depends_on:
      - elasticsearch
      - mssqldb
    links:
      - elasticsearch
      - mssqldb
  
  testsysplan.service.wc:
    container_name: testsysplan.service.wc
    image: ${DOCKER_REGISTRY-}testsysplan.service.wc
    build:
      context: .
      dockerfile: TestSysplan.Worker.Service.WelcomeClient/Dockerfile
    environment:      
      - AMQP_USER=root
      - AMQP_PASS=bn8fLJFD4jjKLShr
      - AMQP_HOST=rabbitmq
      - AMQP_VHOST=/
      - AMQP_PORT=5672
      - AMQP_SSL=none
      - AMQP_DBC=10
      - ELASTICSEARCH_URL=http://elasticsearch:9200
    restart: on-failure
    networks:
      - testsysplan-network
    depends_on:
      - elasticsearch
      - rabbitmq
    links:
      - elasticsearch
      - rabbitmq
          
  testsysplan.service.fc:
    container_name: testsysplan.service.fc
    image: ${DOCKER_REGISTRY-}testsysplan.service.fc
    build:
      context: .
      dockerfile: TestSysplan.Worker.Service.FarewellClient/Dockerfile
    environment:      
      - AMQP_USER=root
      - AMQP_PASS=bn8fLJFD4jjKLShr
      - AMQP_HOST=rabbitmq
      - AMQP_VHOST=/
      - AMQP_PORT=5672
      - AMQP_SSL=none
      - AMQP_DBC=10
      - ELASTICSEARCH_URL=http://elasticsearch:9200
    restart: on-failure
    networks:
      - testsysplan-network
    depends_on:
      - elasticsearch
      - rabbitmq
    links:
      - elasticsearch
      - rabbitmq
          
networks:
  testsysplan-network:
    driver: bridge

volumes:
  dockervol:
    driver: local  